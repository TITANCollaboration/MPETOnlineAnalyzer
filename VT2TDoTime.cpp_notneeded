////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// VT2TDoTime                                                                 //
//                                                                            //
//                                                                            //
//                                                                            //
// The event methods have been written by .                                   //
//                                                                            //
// Please note: The following information is only correct after executing     //
// the ROMEBuilder.                                                           //
//                                                                            //
//                                                                            //
//  This task contains the following histgrams :                              //
//     TDCs                                                                   //
//                                                                            //
// The histograms are created and saved automaticaly by the task.             //
//                                                                            //
// The following method can be used to fill a histogram :                     //
//                                                                            //
// Fill<Histogram Name>(Double_t value,Double_t weight)                       //
//                                                                            //
// For histogram arrays use :                                                 //
//                                                                            //
// Fill<Histogram Name>At(Int_t index,Double_t value,Double_t weight)         //
//                                                                            //
// If more histogram functions are needed use the following function the get  //
//  a handle to the histogram and use the root functions.                     //
//                                                                            //
// Get<Histogram Name>()                                                      //
//                                                                            //
// For histogram arrays use :                                                 //
//                                                                            //
// Get<Histogram Name>At(Int_t index)                                         //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////
/*  This header was generated by ROMEBuilder. Manual changes above the        *
 * following line will be lost next time ROMEBuilder is executed.             */
/////////////////////////////////////----///////////////////////////////////////
#include "generated/VT2Analyzer.h"
#include "tasks/VT2TDoTime.h"
#include "generated/VT2MidasDAQ.h"
#include "ROMEiostream.h"
#include "vt2.h"

// uncomment if you want to include headers of all folders
//#include "VT2AllFolders.h"


ClassImp(VT2TDoTime)

void VT2TDoTime::Init()
{
  cout << "In DoTime Init " << endl;
}

void VT2TDoTime::BeginOfRun()
{
  cout << "In DoTime BOR " << endl;
}

void VT2TDoTime::Event()
{
  unsigned int lTDC, TDC;
  unsigned long cycleSN, cycle1N, cycle2N, cyclePN;
  uint64_t t64, tl64, hstart_time64, hit1_time64, hit2_time64, hstop_time64;
  int i, nitems, debug0=1, fstart;
  
  nitems = gAnalyzer->GetMidas()->GetTDC0BankEntries();
  if (debug0)
    printf("nitems:%d\n", nitems);
  
  hstart_time64 = hit1_time64 = hit2_time64 = hstop_time64 = 0;
  fstart = 0;
  for (i=1; i<nitems; i++) {
    
    t64 = gAnalyzer->GetMidas()->GetTDC0BankAt(i);

    switch (TDC & 0xF0000000) {
    case VT2_HSTART: 
      fstart = 1;
      cycleSN      = ((TDC & VT2_CYCLE_MASK) >> VT2_CYCLE_SHIFT);
      tl64 = gAnalyzer->GetMidas()->GetTDC0BankAt(++i);
      hstart_time64 = ((t64 & 0xFFFF)<<32) + tl64; 
      printf("CycleSN:%d  lTDC:%d\n", cycleSN, hstart_time64);
      break;
    case VT2_HIT1: 
      cycle1N      = ((TDC & VT2_CYCLE_MASK) >> VT2_CYCLE_SHIFT);
      tl64 = gAnalyzer->GetMidas()->GetTDC0BankAt(++i);
      hit1_time64 = ((t64 & 0xFFFF)<<32) + tl64; 
      printf("CycleSN:%d  lTDC:%d\n", cycleSN, hit1_time64);
      break;
    case VT2_HIT2: 
      cycle2N      = ((TDC & VT2_CYCLE_MASK) >> VT2_CYCLE_SHIFT);
      tl64 = gAnalyzer->GetMidas()->GetTDC0BankAt(++i);
      hit2_time64 = ((t64 & 0xFFFF)<<32) + tl64; 
      printf("CycleSN:%d  lTDC:%d\n", cycleSN, hit2_time64);
      break;
    case VT2_HSTOP: 
      cyclePN      = ((TDC & VT2_CYCLE_MASK) >> VT2_CYCLE_SHIFT);
      tl64 = gAnalyzer->GetMidas()->GetTDC0BankAt(++i);
      hstop_time64 = ((t64 & 0xFFFF)<<32) + tl64; 
      printf("CyclePN:%d lTDC:%d\n", cyclePN, hstop_time64);

      if (fstart && (cycleSN == cyclePN)) {
	printf("hstart_time:%d, hit1_time:%d, hit2_time:%d, hstop_time:%d sN:%d pN:%d\n"
	       ,hstart_time64, hit1_time64, hit2_time64, hstop_time64, cycleSN, cyclePN); 
	FillTDCsAt(0, (float)(hstart_time64), 1.);
	FillTDCsAt(1, (float)(hit1_time64), 1.);
	FillTDCsAt(2, (float)(hit2_time64), 1.);
	FillTDCsAt(3, (float)(hstart_time64), 1.);
	FillTDCsAt(3, (float)(hit1_time64), 1.);
	FillTDCsAt(3, (float)(hit2_time64), 1.);
	FillTDCsAt(3, (float)(hstop_time64), 1.);
	/*
	FillTDCsAt(0, (float)(hstop_time64-hstart_time64), 1.);
	FillTDCsAt(1, (float)(hit1_time64-hstart_time64), 1.);
	FillTDCsAt(2, (float)(hit2_time64-hstart_time64), 1.);
	FillTDCsAt(3, (float)(hit1_time64-hstart_time64), 1.);
	FillTDCsAt(3, (float)(hit2_time64-hstart_time64), 1.);
	FillTDCsAt(3, (float)(hstop_time64-hstart_time64), 1.);
	*/
	fstart = 0;
      }
      break;
    default:
      fstart = 0;
    }
    
  }
}

void VT2TDoTime::EndOfRun()
{
  cout << "In DoTime EOR " << endl;
}

void VT2TDoTime::Terminate()
{
}

